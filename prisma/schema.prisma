datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum RoomStatus {
  WAITING
  CHATTING
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  password      String?
  role          UserRole        @default(USER)
  dob           DateTime?
  gender        String?
  interests     String[]        @default([])
  countryCode   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  sentRequests  Friendship[] @relation("FriendshipSender")
  receivedRequests Friendship[] @relation("FriendshipReceiver")
}

model Friendship {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  senderId      String       @db.ObjectId
  receiverId    String       @db.ObjectId
  status        FriendshipStatus @default(PENDING) // PENDING, ACCEPTED
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  sender   User @relation("FriendshipSender", fields: [senderId], references: [id])
  receiver User @relation("FriendshipReceiver", fields: [receiverId], references: [id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}
 
model Account {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userId            String      @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?     @db.String
  access_token      String?     @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?     @db.String
  session_state     String?
 
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
 
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Room {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  status        RoomStatus      @default(WAITING)
}


// npx prisma generate
// npx prisma db push
// npx prisma studio